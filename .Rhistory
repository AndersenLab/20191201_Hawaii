iconWidth = 10, iconHeight = 10,
popupAnchorX = 0.001, popupAnchorY = -10,
iconAnchorX = 10/2, iconAnchorY = 10
)
)
df <- dplyr::filter(df, !is.na(df[[color_use]])) %>%
dplyr::mutate(substrate=ifelse(is.na(substrate), "", substrate)) %>%
dplyr::arrange(collection_lat_long_method)
#print(df)
# make title
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 12px;
}
"))
title <- tags$div(
tag.map.title, HTML(glue::glue("Review {df %>% distinct(project_id) %>% dplyr::pull(project_id)} collection locations"))
)
attach(df)
leaflet::leaflet(data = df, width = 1200, height = 800, options = list(zoomControl = T)) %>%
leaflet::addTiles(
paste0(
"https://stamen-tiles-{s}.a.ssl.fastly.net/terrain-background/{z}/{x}/{y}.png",
jsonlite::read_json("data/thunderforest.json")$key)
) %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{collection_id}</h2><hr />
<strong>collection uplaoded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>postion method used:</strong> {collection_lat_long_method}<br />
<strong>local time:</strong> {collection_local_time}<br />
<strong>altitude:</strong> {altitude} meters<br />
<strong>landscape:</strong> {landscape}<br /><br />"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] ) %>%
leaflet::addControl(title, position = "topleft", className="map-title")
#htmlwidgets::saveWidget(m, tempfile(), selfcontained = FALSE)
#webshot::webshot("temp.html", file = "map.png",
#        cliprect = "viewport", vwidth = 1000, vheight = 1000)
}
##########################################################################
### Use the map function                                               ###
##########################################################################
# Make df for diagnostic plotting
test_df <- fulcrum_dat %>%
dplyr::filter(!is.na(collection_id)) %>%
dplyr::distinct(collection_id, .keep_all =T)
# map collection for diagnostic
diagnostic_map <-  map_collection(test_df %>% dplyr::mutate(color = case_when(collection_lat_long_method == "fulcrum" ~ "red",
collection_lat_long_method == "photo" ~ "green")), "color")
# map collection for diagnostic
diagnostic_map <-  map_collection(test_df %>% dplyr::mutate(color = case_when(collection_lat_long_method == "fulcrum" ~ "red",
collection_lat_long_method == "photo" ~ "green")), "color")
###################################################################################
### Diagnostic  Map function                                                    ###
###################################################################################
map_collection <- function(df, color_use) {
icos <- iconList(
red = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/red.svg"),
iconWidth = 20, iconHeight = 20,
popupAnchorX = 0.001, popupAnchorY = -20,
iconAnchorX = 20/2, iconAnchorY = 20
),
green = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/green.svg"),
iconWidth = 10, iconHeight = 10,
popupAnchorX = 0.001, popupAnchorY = -10,
iconAnchorX = 10/2, iconAnchorY = 10
)
)
df <- dplyr::filter(df, !is.na(df[[color_use]])) %>%
dplyr::mutate(substrate=ifelse(is.na(substrate), "", substrate)) %>%
dplyr::arrange(collection_lat_long_method)
#print(df)
# make title
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 12px;
}
"))
title <- tags$div(
tag.map.title, HTML(glue::glue("Review {df %>% distinct(project_id) %>% dplyr::pull(project_id)} collection locations"))
)
attach(df)
leaflet::leaflet(data = df, width = 1200, height = 800, options = list(zoomControl = T)) %>%
leaflet::addTiles(
paste0(
"https://stamen-tiles-{s}.a.ssl.fastly.net/terrain-background/{z}/{x}/{y}.png",
jsonlite::read_json("data/thunderforest.json")$key)
) %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{collection_id}</h2><hr />
<strong>collection uplaoded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>postion method used:</strong> {collection_lat_long_method}<br />
<strong>local time:</strong> {collection_local_time}<br />
<strong>altitude:</strong> {altitude} meters<br />
<strong>landscape:</strong> {landscape}<br /><br />"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] ) %>%
leaflet::addControl(title, position = "topleft", className="map-title")
#htmlwidgets::saveWidget(m, tempfile(), selfcontained = FALSE)
#webshot::webshot("temp.html", file = "map.png",
#        cliprect = "viewport", vwidth = 1000, vheight = 1000)
}
##########################################################################
### Use the map function                                               ###
##########################################################################
# Make df for diagnostic plotting
test_df <- fulcrum_dat %>%
dplyr::filter(!is.na(collection_id)) %>%
dplyr::distinct(collection_id, .keep_all =T)
# map collection for diagnostic
diagnostic_map <-  map_collection(test_df %>% dplyr::mutate(color = case_when(collection_lat_long_method == "fulcrum" ~ "red",
collection_lat_long_method == "photo" ~ "green")), "color")
###################################################################################
### Diagnostic  Map function                                                    ###
###################################################################################
map_collection <- function(df, color_use) {
icos <- iconList(
red = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/red.svg"),
iconWidth = 20, iconHeight = 20,
popupAnchorX = 0.001, popupAnchorY = -20,
iconAnchorX = 20/2, iconAnchorY = 20
),
green = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/green.svg"),
iconWidth = 10, iconHeight = 10,
popupAnchorX = 0.001, popupAnchorY = -10,
iconAnchorX = 10/2, iconAnchorY = 10
)
)
df <- dplyr::filter(df, !is.na(df[[color_use]])) %>%
dplyr::mutate(substrate=ifelse(is.na(substrate), "", substrate)) %>%
dplyr::arrange(collection_lat_long_method)
#print(df)
# make title
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 12px;
}
"))
title <- tags$div(
tag.map.title, HTML("Review collection locations")
)
attach(df)
leaflet::leaflet(data = df, width = 1200, height = 800, options = list(zoomControl = T)) %>%
leaflet::addTiles(
paste0(
"https://stamen-tiles-{s}.a.ssl.fastly.net/terrain-background/{z}/{x}/{y}.png",
jsonlite::read_json("data/thunderforest.json")$key)
) %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{collection_id}</h2><hr />
<strong>collection uplaoded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>postion method used:</strong> {collection_lat_long_method}<br />
<strong>local time:</strong> {collection_local_time}<br />
<strong>altitude:</strong> {altitude} meters<br />
<strong>landscape:</strong> {landscape}<br /><br />"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] ) %>%
leaflet::addControl(title, position = "topleft", className="map-title")
#htmlwidgets::saveWidget(m, tempfile(), selfcontained = FALSE)
#webshot::webshot("temp.html", file = "map.png",
#        cliprect = "viewport", vwidth = 1000, vheight = 1000)
}
##########################################################################
### Use the map function                                               ###
##########################################################################
# Make df for diagnostic plotting
test_df <- fulcrum_dat %>%
dplyr::filter(!is.na(collection_id)) %>%
dplyr::distinct(collection_id, .keep_all =T)
# map collection for diagnostic
diagnostic_map <-  map_collection(test_df %>% dplyr::mutate(color = case_when(collection_lat_long_method == "fulcrum" ~ "red",
collection_lat_long_method == "photo" ~ "green")), "color")
# install.packages("BiocManager")
library(BiocManager)
# install(c("sangerseqR","annotate","genbankr"))
# BiocManager::install(c("DECIPHER", "Biostrings", "sangerseqR"))
library(devtools)
# install_github("roblanf/sangeranalyseR")
library(sangerseqR)
library(sangeranalyseR)
library(tidyverse)
# install.packages("microclass")
library(annotate)
# set working directory
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
# make input folder
input.folders = c("data/")
test.input.folder = "data/ssu_small_test/"
# make sanger summary for all the .ab1 files. Takes a long time!
sf = summarise.abi.folder(input.folders)
######################
# Trying different method https://colauttilab.github.io/DNAbarcodes.html
ITS<-read.abif("data/ssu_pcr_1/S-0415_oECA1271.ab1") # Read
ITSseq <- sangerseq(ITS) # Extract
SeqX<-makeBaseCalls(ITSseq) # Call
SeqXBlastDF<-blastSequences(paste(SeqX@primarySeq),as='data.frame', hitListSize = 3, timeout = 3000)
#####################################
### loop through test  directory  ###
#####################################
# establish test file list
test_file_list <- list.files(test.input.folder)
# make dataframe to hold loop output
test_seq_blast_df <- NULL
# write loop to process .ab1 files
for(i in unique(test_file_list)){
ITS<-read.abif(glue::glue("{test.input.folder}{i}")) # Read
ITSseq <- sangerseq(ITS) # Extract
SeqX<-makeBaseCalls(ITSseq) # Call
SeqXBlastDF<-blastSequences(paste(SeqX@primarySeq),as='data.frame', hitListSize = 3, timeout = 10000) # blast
test_seq_blast_df <- rbind(test_seq_blast_df, SeqXBlastDF) # bind blast data into dataframe named test_seq_blast_df
}
# Set working directory
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
# load blast .tsv
blast_results <- data.table::fread('data/sanger/blast_results1.tsv')
View(blast_results)
glimpse(blast_results)
# define caenorhabditis pattern
test <- blast_results %>%
dplyr::group_by(s_plate) %>%
dplyr::mutate(caenorhabditis_count = str_count(sciname, pattern = fixed("Caenorhabditis")))
View(test)
# define caenorhabditis pattern
test <- blast_results %>%
dplyr::mutate(caenorhabditis = str_count(sciname, pattern = fixed("Caenorhabditis"))) %>%
dplyr::group_by(s_plate) %>%
dplyr::mutate(caenorhabditis_count = sum(caenorhabditis))
# load blast .tsv
blast_results <- data.table::fread('data/sanger/blast_results1.tsv') %>%
dplyr::mutate(percent_identity = identity/align_len)
# define caenorhabditis pattern
test <- blast_results %>%
dplyr::mutate(caenorhabditis = str_count(sciname, pattern = fixed("Caenorhabditis"))) %>%
dplyr::group_by(s_plate) %>%
dplyr::mutate(caenorhabditis_frac = sum(caenorhabditis)/nrow(s_plate))
# define caenorhabditis pattern
test <- blast_results %>%
dplyr::mutate(caenorhabditis = str_count(sciname, pattern = fixed("Caenorhabditis"))) %>%
dplyr::group_by(s_plate) %>%
dplyr::mutate(caenorhabditis_frac = sum(caenorhabditis)/nrow())
# define caenorhabditis pattern
test <- blast_results %>%
dplyr::mutate(caenorhabditis = str_count(sciname, pattern = fixed("Caenorhabditis"))) %>%
dplyr::group_by(s_plate) %>%
dplyr::mutate(caenorhabditis_frac = sum(caenorhabditis)/nrow(caenorhabditis))
# define caenorhabditis pattern
test <- blast_results %>%
dplyr::mutate(caenorhabditis = str_count(sciname, pattern = fixed("Caenorhabditis"))) %>%
dplyr::group_by(s_plate) %>%
dplyr::mutate(caenorhabditis_frac = sum(caenorhabditis)/nrow(.$caenorhabditis))
# define caenorhabditis pattern
test <- blast_results %>%
dplyr::mutate(caenorhabditis = str_count(sciname, pattern = fixed("Caenorhabditis"))) %>%
dplyr::group_by(s_plate) %>%
dplyr::mutate(caenorhabditis_frac = sum(caenorhabditis)/n())
# define caenorhabditis pattern
test <- blast_results %>%
dplyr::mutate(caenorhabditis = str_count(sciname, pattern = fixed("Caenorhabditis"))) %>%
dplyr::group_by(s_plate) %>%
dplyr::mutate(caenorhabditis_frac = sum(caenorhabditis)/n()) %>%
dplyr::mutate(n = n())
# define caenorhabditis pattern
test <- blast_results %>%
dplyr::mutate(caenorhabditis = str_count(sciname, pattern = fixed("Caenorhabditis"))) %>%
dplyr::group_by(s_plate) %>%
dplyr::mutate(top3hits_frac_caenorhabditis = sum(caenorhabditis)/n()) %>%
dplyr::distinct(s_plate)
# define caenorhabditis pattern
test <- blast_results %>%
dplyr::mutate(caenorhabditis = str_count(sciname, pattern = fixed("Caenorhabditis"))) %>%
dplyr::group_by(s_plate) %>%
dplyr::mutate(top3hits_frac_caenorhabditis = sum(caenorhabditis)/n()) %>%
dplyr::distinct(s_plate, .keep_all = T)
# define caenorhabditis pattern
proc_blasts_1 <- blast_results %>%
dplyr::mutate(caenorhabditis = str_count(sciname, pattern = fixed("Caenorhabditis"))) %>%
dplyr::group_by(s_plate) %>%
dplyr::mutate(top3hits_frac_caenorhabditis = sum(caenorhabditis)/n()) %>%
dplyr::distinct(s_plate, .keep_all = T)
# load blast .tsv
blast_results <- data.table::fread('data/sanger/blast_results1.tsv')
# define caenorhabditis pattern
proc_blasts_1 <- blast_results %>%
dplyr::mutate(caenorhabditis = str_count(sciname, pattern = fixed("Caenorhabditis")),
percent_identity = identity/align_len) %>%
dplyr::group_by(s_plate) %>%
dplyr::mutate(top3hits_frac_caenorhabditis = sum(caenorhabditis)/n()) %>%
dplyr::distinct(s_plate, .keep_all = T)
# output file to show just the caenos
proc_out_caenos <- proc_blasts_1 %>%
dplyr::filter(caenorhabditis == 1)
# save this temp file to data
rio::export(proc_out_caenos, 'data/temp_proc_out_caenos.tsv')
# load manual ssu records
manual_blasts <- data.table::fread('data/temp_proc_out_caenos.tsv')
View(proc_out_caenos)
# output file to show just the caenos
proc_out_caenos <- proc_blasts_1 %>%
dplyr::filter(caenorhabditis == 1) %>%
dplyr::select(s_plate, sciname)
View(proc_out_caenos)
# join these data frames
blast_agreement <- full_join(proc_out_caenos, manual_blasts)
View(blast_agreement)
View(manual_blasts)
# load manual ssu records
manual_blasts <- data.table::fread('data/SSU_caenorhabditis_sp_blast_result.csv')
# join these data frames
blast_agreement <- full_join(proc_out_caenos, manual_blasts)
View(manual_blasts)
# load manual ssu records
manual_blasts <- data.table::fread('data/SSU_caenorhabditis_sp_blast_result.csv') %>%
dplyr::rename(s_plate = s_label)
# join these data frames
blast_agreement <- full_join(proc_out_caenos, manual_blasts)
View(blast_agreement)
# install.packages("BiocManager")
library(BiocManager)
# install(c("sangerseqR","annotate","genbankr"))
# BiocManager::install(c("DECIPHER", "Biostrings", "sangerseqR"))
library(devtools)
# install_github("roblanf/sangeranalyseR")
library(sangerseqR)
library(sangeranalyseR)
library(tidyverse)
# install.packages("microclass")
library(annotate)
# set working directory
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
# make input folder
input.folders = c("data/sanger")
# make sanger summary for all the .ab1 files. Takes a long time!
sf = summarise.abi.folder(input.folders)
?summarise.abi.folder
# make input folder
input.folders = c("data/sanger/raw")
# make input folder
input.folders = c("data/sanger/raw/")
# make sanger summary for all the .ab1 files. Takes a long time!
sf = summarise.abi.folder(input.folders)
# make sanger summary for all the .ab1 files. Takes a long time!
sf = summarise.abi.folder(input.folders, processors = 2)
# install.packages("BiocManager")
library(BiocManager)
# install(c("sangerseqR","annotate","genbankr"))
# BiocManager::install(c("DECIPHER", "Biostrings", "sangerseqR"))
library(devtools)
# install_github("roblanf/sangeranalyseR")
library(sangerseqR)
library(sangeranalyseR)
library(tidyverse)
# install.packages("microclass")
library(annotate)
# set working directory
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
# make input folder
input.folders = c("data/sanger/raw/")
# make sanger summary for all the .ab1 files. Takes a long time!
sf = summarise.abi.folder(input.folders, processors = 2)
BiocManager::install("rhdf5")
library(rhdf5)
library(dplyr)
library(ggplot2)
test <- H5Fopen('/Users/tim/Documents/Batch_data.h5')
View(test)
test
View(test)
View(test)
test[1]
test$1
View(test)
#!/usr/bin/env Rscript
#Load necessary packages
library(tidyverse)
library(lubridate)
library(geosphere)
library(googlesheets)
library(geonames)
library(rebus)
# Set working directory
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
##########################################################################
# part 1 find duplications in nematode nematode_field_sampling.csv     ###
##########################################################################
`duplication in nematode_field_sampling.csv` <- readr::read_csv("data/fulcrum/shipment_1/nematode_field_sampling.csv") %>%
add_count(c_label) %>%
dplyr::filter(n > 1)
View(`duplication in nematode_field_sampling.csv`)
n_duplicated_field_sampling <- `duplication in nematode_field_sampling.csv` %>%
#conditional pipe to return NA if dataframe is empty and move on to count c_labels if not empty.
{if (nrow(.) == 0) return(0) else (.) %>%
dplyr::distinct(c_label) %>%
dplyr::mutate(pull_n = n()) %>%
dplyr::distinct(pull_n) %>%
dplyr::pull(pull_n)
}
##########################################################################
# part 1 find duplications in nematode nematode_field_sampling.csv     ###
##########################################################################
`duplication in nematode_field_sampling.csv` <- readr::read_csv("data/fulcrum/shipment_1/nematode_field_sampling.csv") %>%
add_count(c_label) %>%
dplyr::filter(n > 1)
n_duplicated_field_sampling <- `duplication in nematode_field_sampling.csv` %>%
#conditional pipe to return NA if dataframe is empty and move on to count c_labels if not empty.
{if (nrow(.) == 0) return(0) else (.) %>%
dplyr::distinct(c_label) %>%
dplyr::mutate(pull_n = n()) %>%
dplyr::distinct(pull_n) %>%
dplyr::pull(pull_n)
}
#########################################################################
# part 2  find duplicate records in nematode_isolation.csv            ###
#########################################################################
`duplication in nematode_isolation.csv` <- readr::read_csv("data/fulcrum/shipment_1/nematode_isolation.csv") %>%
add_count(fulcrum_id) %>%
dplyr::rename(distinct_fulcrum_id_count = n) %>%
add_count(c_label) %>%
dplyr::rename(distinct_c_label_count = n)
# get count of duplicated isolation ids
n_duplicated_isolations <- `duplication in nematode_isolation.csv` %>%
dplyr::filter(distinct_fulcrum_id_count > 1) %>%
#conditional pipe to return NA if dataframe is empty and move on to count fulcrum_ids if not empty.
{if (nrow(.) == 0) return(0) else (.) %>%
dplyr::distinct(fulcrum_id) %>%
dplyr::mutate(pull_n = n()) %>%
dplyr::distinct(pull_n) %>%
dplyr::pull(pull_n)
}
View(`duplication in nematode_isolation.csv`)
View(`duplication in nematode_isolation.csv`)
`duplicated isolation ids in nematode_isolation.csv` <-  `duplication in nematode_isolation.csv` %>% dplyr::filter(distinct_fulcrum_id_count >1)
# get count of multiple isolation ids for a single collection
n_multiple_isolations_for_collection <- `duplication in nematode_isolation.csv` %>%
dplyr::filter(distinct_c_label_count > 1) %>%
#conditional pipe to return NA if dataframe is empty and move on to count c_labels if not empty. Need (.) b/c you can't have . alone on the left side of a pipe!
{if (nrow(.) == 0) return(0) else (.) %>%
dplyr::distinct(c_label) %>%
dplyr::mutate(pull_n = n()) %>%
dplyr::distinct(pull_n) %>%
dplyr::pull(pull_n)
}
`duplicated isolations for same collection` <- `duplication in nematode_isolation.csv` %>% dplyr::filter(distinct_c_label_count >1)
#########################################################################
# part 3 find duplications in nematode isolation_s_labeled_plates.csv ###
#########################################################################
`duplication in nematode_isolation_s_labeled_plates.csv` <- readr::read_csv("data/fulcrum/shipment_1/nematode_isolation_s_labeled_plates.csv") %>%
add_count(s_label) %>%
dplyr::filter(n > 1)
# get count of duplicated isolations in nematode isolation_s_labeled_plates.csv
n_duplicated_isolations_s_labeled_plates <- `duplication in nematode_isolation_s_labeled_plates.csv` %>%
#conditional pipe to return NA if dataframe is empty and move on to count s_labels if not empty. Need (.) b/c you can't have . alone on the left side of a pipe!
{if (nrow(.) == 0) return(0) else (.) %>%
dplyr::distinct(s_label) %>%
dplyr::mutate(pull_n = n()) %>%
dplyr::distinct(pull_n) %>%
dplyr::pull(pull_n)
}
knitr::kable(`duplication in nematode_isolation_s_labeled_plates.csv`, caption =  glue::glue("{n_duplicated_isolations_s_labeled_plates} s_label(s) duplicated in nematode_isolation_s_labeled_plates.csv")) %>%
kable_styling() %>%
scroll_box(width = "100%", height = "200px")
#########################################################################
# part 3 find duplications in nematode isolation_s_labeled_plates.csv ###
#########################################################################
`duplication in nematode_isolation_s_labeled_plates.csv` <- readr::read_csv("data/fulcrum/shipment_1/nematode_isolation_s_labeled_plates.csv") %>%
add_count(s_label) %>%
dplyr::filter(n > 1) %>%
dplyr::arrange(s_label)
# get count of duplicated isolations in nematode isolation_s_labeled_plates.csv
n_duplicated_isolations_s_labeled_plates <- `duplication in nematode_isolation_s_labeled_plates.csv` %>%
#conditional pipe to return NA if dataframe is empty and move on to count s_labels if not empty. Need (.) b/c you can't have . alone on the left side of a pipe!
{if (nrow(.) == 0) return(0) else (.) %>%
dplyr::distinct(s_label) %>%
dplyr::mutate(pull_n = n()) %>%
dplyr::distinct(pull_n) %>%
dplyr::pull(pull_n)
}
View(`duplication in nematode_field_sampling.csv`)
View(`duplication in nematode_isolation_s_labeled_plates.csv`)
